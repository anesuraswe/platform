// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // or "postgresql" if using PostgreSQL
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String
  phoneNumber   String?
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  date          DateTime
  venue         String
  totalSeats    Int
  seats         Seat[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Seat {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  eventId       String    @db.ObjectId
  event         Event     @relation(fields: [eventId], references: [id])
  seatNumber    String
  status        String    @default("available") // e.g., available, reserved, booked
  bookingId     String?   @db.ObjectId
  booking       Booking?  @relation(fields: [bookingId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Booking {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  eventId       String    @db.ObjectId
  event         Event     @relation(fields: [eventId], references: [id])
  seatId        String    @db.ObjectId
  seat          Seat      @relation(fields: [seatId], references: [id])
  payment       Payment?
  ticket        Ticket?
  bookingDate   DateTime  @default(now())
  paymentStatus String    @default("pending") // e.g., pending, completed, failed
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String    @db.ObjectId
  booking       Booking   @relation(fields: [bookingId], references: [id])
  paymentMethod String    // e.g., local, international
  amount        Float
  paymentDate   DateTime  @default(now())
  transactionId String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Ticket {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String    @db.ObjectId
  booking       Booking   @relation(fields: [bookingId], references: [id])
  qrCode        String
  status        String    @default("active") // e.g., active, used
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}